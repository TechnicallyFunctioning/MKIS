//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Ship"",
            ""id"": ""5399579d-dcdf-4098-9086-0aeee1f2ae63"",
            ""actions"": [
                {
                    ""name"": ""JoinAction"",
                    ""type"": ""Button"",
                    ""id"": ""c22793bb-8906-414b-bca1-e59dcf0c081d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Value"",
                    ""id"": ""477ec1b3-bdae-4d8e-9949-7dc24aa835b8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""72881417-c86e-4d7a-91f2-97e9a374011d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""596bd7d9-ebbe-4c5f-88b3-c3f66747afee"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""52dbd43c-3e3c-4148-ad45-0b667d88376a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire1"",
                    ""type"": ""Button"",
                    ""id"": ""90c4e931-a133-4c60-bae0-6eb8bf45c645"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire2"",
                    ""type"": ""Button"",
                    ""id"": ""45a2139b-0fce-4dbf-9cf2-19b335099148"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2b49833f-5568-4b61-b2ac-02faa3c2bd3c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b9f0da4a-6cc3-4cb9-a005-51a8ee4f9ea3"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d0a91b06-ca99-4c76-beb4-36cc9f23f3c0"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5f011903-6f6b-4a92-9d59-bdb5894bef62"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0d29d47d-66b0-4d74-ba95-d88b7bc62971"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""64f4773e-3592-4ae5-8c59-30b5f98e556b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4f468f81-493e-4d9e-bec5-a9fb2e9053aa"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e857926-5d73-4073-b9ca-8f3f439cde4d"",
                    ""path"": ""<Mouse>/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a3887fa-d9df-4e3b-99b5-19fbb392739c"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""682f04df-183d-4d0a-b34f-04ad52839539"",
                    ""path"": ""<Mouse>/position/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba2cd766-3d57-4d5a-9af2-8fbe10a2e7c8"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""JoinAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""064f60d9-9f02-41b9-8a17-dd958d6b502e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""JoinAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffbc0ab6-b722-41f9-acdf-ba49b5669513"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""daf33fbe-4779-4f57-a60b-57579c49675a"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Fire1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25796026-4d98-489a-8e81-c4ca00bc9866"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Fire2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Ship
        m_Ship = asset.FindActionMap("Ship", throwIfNotFound: true);
        m_Ship_JoinAction = m_Ship.FindAction("JoinAction", throwIfNotFound: true);
        m_Ship_Thrust = m_Ship.FindAction("Thrust", throwIfNotFound: true);
        m_Ship_Pitch = m_Ship.FindAction("Pitch", throwIfNotFound: true);
        m_Ship_Yaw = m_Ship.FindAction("Yaw", throwIfNotFound: true);
        m_Ship_Roll = m_Ship.FindAction("Roll", throwIfNotFound: true);
        m_Ship_Fire1 = m_Ship.FindAction("Fire1", throwIfNotFound: true);
        m_Ship_Fire2 = m_Ship.FindAction("Fire2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ship
    private readonly InputActionMap m_Ship;
    private IShipActions m_ShipActionsCallbackInterface;
    private readonly InputAction m_Ship_JoinAction;
    private readonly InputAction m_Ship_Thrust;
    private readonly InputAction m_Ship_Pitch;
    private readonly InputAction m_Ship_Yaw;
    private readonly InputAction m_Ship_Roll;
    private readonly InputAction m_Ship_Fire1;
    private readonly InputAction m_Ship_Fire2;
    public struct ShipActions
    {
        private @InputActions m_Wrapper;
        public ShipActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @JoinAction => m_Wrapper.m_Ship_JoinAction;
        public InputAction @Thrust => m_Wrapper.m_Ship_Thrust;
        public InputAction @Pitch => m_Wrapper.m_Ship_Pitch;
        public InputAction @Yaw => m_Wrapper.m_Ship_Yaw;
        public InputAction @Roll => m_Wrapper.m_Ship_Roll;
        public InputAction @Fire1 => m_Wrapper.m_Ship_Fire1;
        public InputAction @Fire2 => m_Wrapper.m_Ship_Fire2;
        public InputActionMap Get() { return m_Wrapper.m_Ship; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipActions set) { return set.Get(); }
        public void SetCallbacks(IShipActions instance)
        {
            if (m_Wrapper.m_ShipActionsCallbackInterface != null)
            {
                @JoinAction.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnJoinAction;
                @JoinAction.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnJoinAction;
                @JoinAction.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnJoinAction;
                @Thrust.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnThrust;
                @Thrust.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnThrust;
                @Thrust.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnThrust;
                @Pitch.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnPitch;
                @Yaw.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnYaw;
                @Yaw.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnYaw;
                @Yaw.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnYaw;
                @Roll.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnRoll;
                @Fire1.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnFire1;
                @Fire1.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnFire1;
                @Fire1.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnFire1;
                @Fire2.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnFire2;
                @Fire2.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnFire2;
                @Fire2.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnFire2;
            }
            m_Wrapper.m_ShipActionsCallbackInterface = instance;
            if (instance != null)
            {
                @JoinAction.started += instance.OnJoinAction;
                @JoinAction.performed += instance.OnJoinAction;
                @JoinAction.canceled += instance.OnJoinAction;
                @Thrust.started += instance.OnThrust;
                @Thrust.performed += instance.OnThrust;
                @Thrust.canceled += instance.OnThrust;
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
                @Yaw.started += instance.OnYaw;
                @Yaw.performed += instance.OnYaw;
                @Yaw.canceled += instance.OnYaw;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Fire1.started += instance.OnFire1;
                @Fire1.performed += instance.OnFire1;
                @Fire1.canceled += instance.OnFire1;
                @Fire2.started += instance.OnFire2;
                @Fire2.performed += instance.OnFire2;
                @Fire2.canceled += instance.OnFire2;
            }
        }
    }
    public ShipActions @Ship => new ShipActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    public interface IShipActions
    {
        void OnJoinAction(InputAction.CallbackContext context);
        void OnThrust(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnFire1(InputAction.CallbackContext context);
        void OnFire2(InputAction.CallbackContext context);
    }
}
